package org.mule.transport.legstar.test.lsfileac;
import org.mule.transport.legstar.transformer.AbstractJavaToHostMuleTransformer;
import java.util.HashMap;
import com.legstar.coxb.transform.AbstractTransformers;
import org.mule.api.transformer.TransformerException;
import com.legstar.test.coxb.lsfileac.bind.QueryDataTransformers;
import com.legstar.test.coxb.lsfileac.bind.QueryLimitTransformers;

/**
 * LsfileacRequestHolder to Host Byte Array Mule Transformer.
 * <p/>
 * <code>LsfileacRequestHolderToHostMuleTransformer</code> takes a LsfileacRequestHolder object as input
 * and turns it into a byte array in host format (EBCDIC), ready
 * to be sent to a target Mainframe.
 * <p/> 
 * Class generated by LegStar Mule Component generator.
 */
public class LsfileacRequestHolderToHostMuleTransformer extends AbstractJavaToHostMuleTransformer {

    /**
     * Constructs the transformer. Source is a LsfileacRequestHolder object and result
     * will be a byte array.
     */
    public LsfileacRequestHolderToHostMuleTransformer() {
        super(new HashMap < String, AbstractTransformers >());
        getBindingTransformersMap().put("QueryData", new QueryDataTransformers());
        getBindingTransformersMap().put("QueryLimit", new QueryLimitTransformers());
        registerSourceType(LsfileacRequestHolder.class);
    }

    /** {@inheritDoc} */
    public Object getObjectFromHolder(
            final Object holderObject,
            final String partID) throws TransformerException {
            
        if (partID.equals("QueryData")) {
            return ((LsfileacRequestHolder) holderObject).getQueryData();
        }
        if (partID.equals("QueryLimit")) {
            return ((LsfileacRequestHolder) holderObject).getQueryLimit();
        }
        return null;
    }

}

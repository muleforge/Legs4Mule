package org.mule.transport.legstar.test.lsfileac;
import org.mule.transformer.types.DataTypeFactory;
import org.mule.transport.legstar.transformer.AbstractHostToJavaMuleTransformer;
import java.util.HashMap;
import java.util.Map;
import com.legstar.coxb.transform.AbstractTransformers;
import org.mule.api.transformer.TransformerException;
import com.legstar.test.coxb.lsfileac.ReplyData;
import com.legstar.test.coxb.lsfileac.ReplyStatus;
import com.legstar.test.coxb.lsfileac.bind.ReplyDataTransformers;
import com.legstar.test.coxb.lsfileac.bind.ReplyStatusTransformers;

/**
 * Host Byte Array to LsfileacResponseHolder Mule Transformer.
 * <p/>
 * <code>HostToLsfileacResponseHolderMuleTransformer</code> takes a byte array in host format
 * (EBCDIC) coming from a source Mainframe as input and turns it into
 * a LsfileacResponseHolder object.
 * <p/>
 * Class generated by LegStar Mule Component generator.
 */
public class HostToLsfileacResponseHolderMuleTransformer extends AbstractHostToJavaMuleTransformer {

    /**
     * Constructs the transformer. Source is a byte array and result will be
     * a LsfileacResponseHolder object.
     */
    public HostToLsfileacResponseHolderMuleTransformer() {
        super(new HashMap < String, AbstractTransformers >());
        getBindingTransformersMap().put("ReplyData", new ReplyDataTransformers());
        getBindingTransformersMap().put("ReplyStatus", new ReplyStatusTransformers());
        setReturnDataType(DataTypeFactory.create(LsfileacResponseHolder.class));
    }

    /** {@inheritDoc} */
    public Object createHolder(
            final Map < String, Object > transformedParts) throws TransformerException {
        LsfileacResponseHolder holder = new LsfileacResponseHolder();
        holder.setReplyData((ReplyData) transformedParts.get("ReplyData"));
        holder.setReplyStatus((ReplyStatus) transformedParts.get("ReplyStatus"));
        return holder;
    }

}

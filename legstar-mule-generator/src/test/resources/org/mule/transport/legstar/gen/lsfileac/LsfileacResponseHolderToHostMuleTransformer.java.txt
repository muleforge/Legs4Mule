package org.mule.transport.legstar.test.lsfileac;
import org.mule.transformer.types.SimpleDataType;
import org.mule.transport.legstar.transformer.AbstractJavaToHostMuleTransformer;
import java.util.HashMap;
import com.legstar.coxb.transform.AbstractTransformers;
import org.mule.api.transformer.TransformerException;
import com.legstar.test.coxb.lsfileac.bind.ReplyDataTransformers;
import com.legstar.test.coxb.lsfileac.bind.ReplyStatusTransformers;

/**
 * LsfileacResponseHolder to Host Byte Array Mule Transformer.
 * <p/>
 * <code>LsfileacResponseHolderToHostMuleTransformer</code> takes a LsfileacResponseHolder object as input
 * and turns it into a byte array in host format (EBCDIC), ready
 * to be sent to a target Mainframe.
 * <p/> 
 * Class generated by LegStar Mule Component generator.
 */
public class LsfileacResponseHolderToHostMuleTransformer extends AbstractJavaToHostMuleTransformer {

    /**
     * Constructs the transformer. Source is a LsfileacResponseHolder object and result
     * will be a byte array.
     */
    public LsfileacResponseHolderToHostMuleTransformer() {
        super(new HashMap < String, AbstractTransformers >());
        getBindingTransformersMap().put("ReplyData", new ReplyDataTransformers());
        getBindingTransformersMap().put("ReplyStatus", new ReplyStatusTransformers());
        registerSourceType(new SimpleDataType<Object>(LsfileacResponseHolder.class));
    }

    /** {@inheritDoc} */
    public Object getObjectFromHolder(
            final Object holderObject,
            final String partID) throws TransformerException {
            
        if (partID.equals("ReplyData")) {
            return ((LsfileacResponseHolder) holderObject).getReplyData();
        }
        if (partID.equals("ReplyStatus")) {
            return ((LsfileacResponseHolder) holderObject).getReplyStatus();
        }
        return null;
    }

}

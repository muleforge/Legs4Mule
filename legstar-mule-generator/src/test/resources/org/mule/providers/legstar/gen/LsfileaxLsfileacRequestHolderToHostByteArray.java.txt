package org.mule.providers.legstar.test.lsfileax;
import org.mule.providers.legstar.transformers.AbstractJavaToHostEsbTransformer;
import java.util.HashMap;
import java.util.Map;
import com.legstar.coxb.transform.AbstractTransformers;
import org.mule.umo.transformer.TransformerException;
import com.legstar.test.coxb.lsfileac.QueryData;
import com.legstar.test.coxb.lsfileac.QueryLimit;
import com.legstar.test.coxb.lsfileac.bind.QueryDataTransformers;
import com.legstar.test.coxb.lsfileac.bind.QueryLimitTransformers;

/**
 * LegStar/Mule Operation LsfileacRequestHolder to Host Byte Array Transformer.
 * 
 * <code>LsfileacRequestHolderToHostByteArray</code> takes a LsfileacRequestHolder object as input
 * and turns it into a byte array in host format (EBCDIC) ready
 * to transport to a destination Mainframe.
 * 
 * This class was generated by LegStar Mule Component generator.
 */
public class LsfileacRequestHolderToHostByteArray extends AbstractJavaToHostEsbTransformer {

    /**
     * Constructs the transformer. Source is a LsfileacRequestHolder object and result
     * will be a byte array.
     */
    public LsfileacRequestHolderToHostByteArray() {
        super(new HashMap < String, AbstractTransformers >());
        getBindingTransformersMap().put("QueryData", new QueryDataTransformers());
        getBindingTransformersMap().put("QueryLimit", new QueryLimitTransformers());
        registerSourceType(LsfileacRequestHolder.class);
    }

        /** {@inheritDoc} */
        public Object getObjectFromHolder(
                final Object holderObject,
                final String partID) throws TransformerException {
            
            if (partID.equals("QueryData")) {
                return ((LsfileacRequestHolder) holderObject).getQueryData();
            }
            if (partID.equals("QueryLimit")) {
                return ((LsfileacRequestHolder) holderObject).getQueryLimit();
            }
            return null;
        }

}

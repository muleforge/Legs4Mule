package org.mule.providers.legstar.test.lsfileac;
import org.mule.providers.NullPayload;
import org.mule.providers.http.HttpResponse;
import org.mule.providers.legstar.http.transformers.AbstractObjectToHttpResponseTransformer;
import org.mule.umo.transformer.TransformerException;
import org.mule.umo.UMOEventContext;



/**
 * LegStar/Mule Operation LsfileacRequestHolder to Http response Transformer.
 * 
 * <code>LsfileacRequestHolderToHttpResponse</code> takes a LsfileacRequestHolder
 * object as input, as well as a series of properties to create an http
 * response with binary content in host format (EBCDIC) ready to be sent
 * to a target Mainframe.
 * 
 * This class was generated by LegStar Mule Component generator.
 */
public class LsfileacRequestHolderToHttpResponse
        extends AbstractObjectToHttpResponseTransformer {

    /**
     * Constructs the transformer. Source is a LsfileacRequestHolder object.
     */
    public LsfileacRequestHolderToHttpResponse() {
        super();
        registerSourceType(LsfileacRequestHolder.class);
    }

    /** {@inheritDoc} */
    public Object transform(
            final Object src,
            final String encoding,
            final UMOEventContext context) throws TransformerException {

        /* This situation arises if the client starts by an HTTP HEAD method. */
        if (src instanceof HttpResponse) {
            return src;
        }
        
        /* This situation happens when an exception happened. There is normally
        * a 500 http status set by the standard Mule exception mapping 
        * mechanism */
        if (src instanceof NullPayload) {
            return super.transform(null, encoding, context);
        }

        /* Use existing transformer to get a host byte array */
        LsfileacRequestHolderToHostByteArray xformer =
            new LsfileacRequestHolderToHostByteArray();
        byte[] hostBytes = (byte[]) xformer.transform(src, encoding, context);
        
        /* Delegate to parent the encapsulation in an http body */
        return super.transform(hostBytes, encoding, context);
    }

}

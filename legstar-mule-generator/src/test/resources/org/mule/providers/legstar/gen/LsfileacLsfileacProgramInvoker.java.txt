package org.mule.providers.legstar.test.lsfileac;
import com.legstar.coxb.transform.HostTransformException;
import com.legstar.host.invoke.AbstractProgramInvoker;
import com.legstar.host.invoke.HostInvoker;
import com.legstar.host.invoke.HostInvokerException;
import com.legstar.messaging.LegStarAddress;
import java.util.LinkedHashMap;
import java.util.Map;
import com.legstar.test.coxb.lsfileac.bind.QueryDataTransformers;
import com.legstar.test.coxb.lsfileac.bind.QueryLimitTransformers;
import com.legstar.test.coxb.lsfileac.bind.ReplyDataTransformers;
import com.legstar.test.coxb.lsfileac.bind.ReplyStatusTransformers;

/**
 * Implements an invoker for program LSFILEAC.
 * <p/>
 * This host program maps to operation lsfileac.
 * 
 * This class was generated by LegStar Mule Component generator.
 *
 */
public class LsfileacProgramInvoker extends AbstractProgramInvoker {

    /** Host transformers for QueryData java data object. */
    private QueryDataTransformers mQueryDataTransformers;
    /** Host transformers for QueryLimit java data object. */
    private QueryLimitTransformers mQueryLimitTransformers;
    /** Host transformers for ReplyData java data object. */
    private ReplyDataTransformers mReplyDataTransformers;
    /** Host transformers for ReplyStatus java data object. */
    private ReplyStatusTransformers mReplyStatusTransformers;

    /** Operation name for lsfileac. */
    private static final String  OPERATION_NAME = "lsfileac";

    /** Properties for operation lsfileac. */
    private static final String  PROGRAM_PROPERTIES = "lsfileac.properties";

    /**
     * Operation invoker constructor.
     * @param configFileName invoker configuration file name
     */
    public LsfileacProgramInvoker(final String configFileName) {
        super(configFileName, OPERATION_NAME, PROGRAM_PROPERTIES);
        mQueryDataTransformers = new QueryDataTransformers();
        mQueryLimitTransformers = new QueryLimitTransformers();
        mReplyDataTransformers = new ReplyDataTransformers();
        mReplyStatusTransformers = new ReplyStatusTransformers();
    }

    /**
     * Invoke the LSFILEAC host program.
     * <p/>
     * The sequence of operations performed is:
     * <ul>
     * <li>Get an invoker for the target host address and program</li>
     * <li>Transform request data object into host bytes</li>
     * <li>Invoke the remote program</li>
     * <li>Transform reply bytes into java data object</li>
     * </ul>
     * @param address target host address
     * @param requestID a unique identifier for this request
     * @param request the request java data object 
     * @return the reply java data object
     * @throws HostInvokerException if host invoker cannot be created or configured
     * @throws HostTransformException if transformation fails
     */
    public final LsfileacResponseHolder lsfileac(
            final LegStarAddress address,
            final String requestID,
            final LsfileacRequestHolder request)
    throws HostInvokerException, HostTransformException {

        HostInvoker hostInvoker = getHostInvoker(address);
        String hostCharset = hostInvoker.getAddress().getHostCharset();

        Map < String, byte[] > requestParts =
            new LinkedHashMap < String, byte[] >(); 
        requestParts.put("QueryData",
             getQueryDataTransformers().toHost(
                request.getQueryData(), hostCharset));
        requestParts.put("QueryLimit",
             getQueryLimitTransformers().toHost(
                request.getQueryLimit(), hostCharset));

        Map < String, byte[] > replyParts =
            hostInvoker.invoke(requestID, requestParts);
        
        LsfileacResponseHolder reply = new LsfileacResponseHolder();
        reply.setReplyData(
            getReplyDataTransformers().toJava(
                replyParts.get("ReplyData"), hostCharset));
        reply.setReplyStatus(
            getReplyStatusTransformers().toJava(
                replyParts.get("ReplyStatus"), hostCharset));
        return reply;

    }

    /**
     * @return the host transformers for QueryData
     */
    public QueryDataTransformers getQueryDataTransformers() {
        return mQueryDataTransformers;
    }

    /**
     * @param transformers the host transformers for QueryData
     */
    public void setQueryDataTransformers(
            final QueryDataTransformers transformers) {
        mQueryDataTransformers = transformers;
    }

    /**
     * @return the host transformers for QueryLimit
     */
    public QueryLimitTransformers getQueryLimitTransformers() {
        return mQueryLimitTransformers;
    }

    /**
     * @param transformers the host transformers for QueryLimit
     */
    public void setQueryLimitTransformers(
            final QueryLimitTransformers transformers) {
        mQueryLimitTransformers = transformers;
    }

    /**
     * @return the host transformers for ReplyData
     */
    public ReplyDataTransformers getReplyDataTransformers() {
        return mReplyDataTransformers;
    }

    /**
     * @param transformers the host transformers for ReplyData
     */
    public void setReplyDataTransformers(
            final ReplyDataTransformers transformers) {
        mReplyDataTransformers = transformers;
    }

    /**
     * @return the host transformers for ReplyStatus
     */
    public ReplyStatusTransformers getReplyStatusTransformers() {
        return mReplyStatusTransformers;
    }

    /**
     * @param transformers the host transformers for ReplyStatus
     */
    public void setReplyStatusTransformers(
            final ReplyStatusTransformers transformers) {
        mReplyStatusTransformers = transformers;
    }

}

package org.mule.providers.legstar.test.lsfileac;
import org.mule.providers.legstar.transformers.AbstractHostToJavaEsbTransformer;
import java.util.HashMap;
import java.util.Map;
import com.legstar.coxb.transform.AbstractTransformers;
import org.mule.umo.transformer.TransformerException;
import com.legstar.test.coxb.lsfileac.QueryData;
import com.legstar.test.coxb.lsfileac.QueryLimit;
import com.legstar.test.coxb.lsfileac.bind.QueryDataTransformers;
import com.legstar.test.coxb.lsfileac.bind.QueryLimitTransformers;

/**
 * LegStar/Mule Operation Host Byte Array to LsfileacRequestHolder Transformer.
 * 
 * <code>HostByteArrayToLsfileacRequestHolder</code> takes a byte array in host format
 * (EBCDIC) coming from a source Mainframe as input and turns it into
 * a LsfileacRequestHolder object.
 * 
 * This class was generated by LegStar Mule Component generator.
 */
public class HostByteArrayToLsfileacRequestHolder extends AbstractHostToJavaEsbTransformer {

    /**
     * Constructs the transformer. Source is a byte array and result will be
     * a LsfileacRequestHolder object.
     */
    public HostByteArrayToLsfileacRequestHolder() {
        super(new HashMap < String, AbstractTransformers >());
        getBindingTransformersMap().put("QueryData", new QueryDataTransformers());
        getBindingTransformersMap().put("QueryLimit", new QueryLimitTransformers());
        setReturnClass(LsfileacRequestHolder.class);
    }

        /** {@inheritDoc} */
        public Object createHolder(
                final Map < String, Object > transformedParts) throws TransformerException {
            LsfileacRequestHolder holder = new LsfileacRequestHolder();
            holder.setQueryData((QueryData) transformedParts.get("QueryData"));
            holder.setQueryLimit((QueryLimit) transformedParts.get("QueryLimit"));
            return holder;
        }

}

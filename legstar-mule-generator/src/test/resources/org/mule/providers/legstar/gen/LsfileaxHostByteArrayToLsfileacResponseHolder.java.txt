package org.mule.providers.legstar.test.lsfileax;
import org.mule.providers.legstar.transformers.AbstractHostToJavaEsbTransformer;
import java.util.HashMap;
import java.util.Map;
import com.legstar.coxb.transform.AbstractTransformers;
import org.mule.umo.transformer.TransformerException;
import com.legstar.test.coxb.lsfileac.ReplyData;
import com.legstar.test.coxb.lsfileac.ReplyStatus;
import com.legstar.test.coxb.lsfileac.bind.ReplyDataTransformers;
import com.legstar.test.coxb.lsfileac.bind.ReplyStatusTransformers;

/**
 * LegStar/Mule Operation Host Byte Array to LsfileacResponseHolder Transformer.
 * 
 * <code>HostByteArrayToLsfileacResponseHolder</code> takes a byte array in host format
 * (EBCDIC) coming from a source Mainframe as input and turns it into
 * a LsfileacResponseHolder object.
 * 
 * This class was generated by LegStar Mule Component generator.
 */
public class HostByteArrayToLsfileacResponseHolder extends AbstractHostToJavaEsbTransformer {

    /**
     * Constructs the transformer. Source is a byte array and result will be
     * a LsfileacResponseHolder object.
     */
    public HostByteArrayToLsfileacResponseHolder() {
        super(new HashMap < String, AbstractTransformers >());
        getBindingTransformersMap().put("ReplyData", new ReplyDataTransformers());
        getBindingTransformersMap().put("ReplyStatus", new ReplyStatusTransformers());
        setReturnClass(LsfileacResponseHolder.class);
    }

        /** {@inheritDoc} */
        public Object createHolder(
                final Map < String, Object > transformedParts) throws TransformerException {
            LsfileacResponseHolder holder = new LsfileacResponseHolder();
            holder.setReplyData((ReplyData) transformedParts.get("ReplyData"));
            holder.setReplyStatus((ReplyStatus) transformedParts.get("ReplyStatus"));
            return holder;
        }

}

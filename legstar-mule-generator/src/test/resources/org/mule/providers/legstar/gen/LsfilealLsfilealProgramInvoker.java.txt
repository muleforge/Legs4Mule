package org.mule.providers.legstar.test.lsfileal;
import com.legstar.coxb.transform.HostTransformException;
import com.legstar.host.invoke.AbstractProgramInvoker;
import com.legstar.host.invoke.HostInvoker;
import com.legstar.host.invoke.HostInvokerException;
import com.legstar.messaging.LegStarAddress;
import com.legstar.test.coxb.lsfileal.RequestParms;
import com.legstar.test.coxb.lsfileal.ReplyData;
import com.legstar.test.coxb.lsfileal.bind.RequestParmsTransformers;
import com.legstar.test.coxb.lsfileal.bind.ReplyDataTransformers;

/**
 * Implements an invoker for program LSFILEAL.
 * <p/>
 * This host program maps to operation lsfileal.
 * 
 * This class was generated by LegStar Mule Component generator.
 *
 */
public class LsfilealProgramInvoker extends AbstractProgramInvoker {

    /** Host transformers for RequestParms java data object. */
    private RequestParmsTransformers mRequestParmsTransformers;
    /** Host transformers for ReplyData java data object. */
    private ReplyDataTransformers mReplyDataTransformers;

    /** Operation name for lsfileal. */
    private static final String  OPERATION_NAME = "lsfileal";

    /** Properties for operation lsfileal. */
    private static final String  PROGRAM_PROPERTIES = "lsfileal.properties";

    /**
     * Operation invoker constructor.
     * @param configFileName invoker configuration file name
     */
    public LsfilealProgramInvoker(final String configFileName) {
        super(configFileName, OPERATION_NAME, PROGRAM_PROPERTIES);
        mRequestParmsTransformers = new RequestParmsTransformers();
        mReplyDataTransformers = new ReplyDataTransformers();
    }

    /**
     * Invoke the LSFILEAL host program.
     * <p/>
     * The sequence of operations performed is:
     * <ul>
     * <li>Get an invoker for the target host address and program</li>
     * <li>Transform request data object into host bytes</li>
     * <li>Invoke the remote program</li>
     * <li>Transform reply bytes into java data object</li>
     * </ul>
     * @param address target host address
     * @param requestID a unique identifier for this request
     * @param request the request java data object 
     * @return the reply java data object
     * @throws HostInvokerException if host invoker cannot be created or configured
     * @throws HostTransformException if transformation fails
     */
    public final ReplyData lsfileal(
            final LegStarAddress address,
            final String requestID,
            final RequestParms request)
    throws HostInvokerException, HostTransformException {

        HostInvoker hostInvoker = getHostInvoker(address);
        String hostCharset = hostInvoker.getAddress().getHostCharset();

        byte[] requestBytes =
            getRequestParmsTransformers().toHost(request, hostCharset);

        byte[] replyBytes = hostInvoker.invoke(requestID, requestBytes);

        return getReplyDataTransformers().toJava(replyBytes, hostCharset);

    }

    /**
     * @return the host transformers for RequestParms
     */
    public RequestParmsTransformers getRequestParmsTransformers() {
        return mRequestParmsTransformers;
    }

    /**
     * @param transformers the host transformers for RequestParms
     */
    public void setRequestParmsTransformers(
            final RequestParmsTransformers transformers) {
        mRequestParmsTransformers = transformers;
    }

    /**
     * @return the host transformers for ReplyData
     */
    public ReplyDataTransformers getReplyDataTransformers() {
        return mReplyDataTransformers;
    }

    /**
     * @param transformers the host transformers for ReplyData
     */
    public void setReplyDataTransformers(
            final ReplyDataTransformers transformers) {
        mReplyDataTransformers = transformers;
    }

}

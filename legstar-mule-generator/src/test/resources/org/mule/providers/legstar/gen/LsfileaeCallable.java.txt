package org.mule.providers.legstar.test.lsfileae;
import org.mule.providers.legstar.cixs.AbstractAdapterCallable;
import org.mule.providers.legstar.cixs.MuleCixsException;
import org.mule.providers.legstar.cixs.MuleHostHeader;

import com.legstar.coxb.transform.HostTransformException;
import com.legstar.host.invoke.HostInvokerException;

import com.legstar.test.coxb.lsfileae.Dfhcommarea;

/**
 * LegStar/Mule Callable Invoker implementation.
 * Each method maps to a mainframe program. 
 * 
 * This class was generated by LegStar Mule Component generator.
 */
public class LsfileaeCallable extends AbstractAdapterCallable {

    /** Name of this action adapter implementation. */
    private static final String  ACTION_ADAPTER_NAME = "lsfileae";

    /** Invoker implementation for operation lsfileae. */
    private LsfileaeProgramInvoker mLsfileaeProgramInvoker;

    /**
    * Standard constructor.
    */
    public LsfileaeCallable() {
        super(ACTION_ADAPTER_NAME);
        mLsfileaeProgramInvoker = new LsfileaeProgramInvoker(getLegStarConfigFileName());
    }

    /**
     * Synchronous execution of mainframe programs.
     * <p/>
     * @param request the request java type that will be converted to mainframe
     *  format before it is sent over the wire.
     * @param hostHeader mainframe addressing parameters
     * @return the reply java type inferred from the mainframe program output
     * @throws MuleCixsException signals problems running mainframe program
     */
    public Object call(
          final Object request,
          final MuleHostHeader hostHeader) throws MuleCixsException {
        try {

            if (request instanceof Dfhcommarea) {
                return getLsfileaeProgramInvoker().lsfileae(
                        hostHeader.getAddress(),
                        getRequestID(hostHeader),
                        (Dfhcommarea) request);
            }
    
            throw new MuleCixsException(
                    "Request object of class "
                    + request.getClass().getName() + " is not supported");
        } catch (HostInvokerException e) {
            throw new MuleCixsException(e);
        } catch (HostTransformException e) {
            throw new MuleCixsException(e);
        }
    }

    /**
     * @return the invoker implementation for operation lsfileae
     */
    public LsfileaeProgramInvoker getLsfileaeProgramInvoker() {
        return mLsfileaeProgramInvoker;
    }

    /**
     * @param programInvoker the invoker implementation for operation lsfileae to set
     */
    public void setLsfileaeProgramInvoker(
            final LsfileaeProgramInvoker programInvoker) {
        mLsfileaeProgramInvoker = programInvoker;
    }

}

##/////////////////////////////////////////////////////////////////////
##Mule Operation Object to Host Byte Array transformer Template.
##@author Fady
##@version 0.1
##/////////////////////////////////////////////////////////////////////
#if(${cixsOperation.packageName})
package ${cixsOperation.packageName};
#end
import org.mule.providers.NullPayload;
import org.mule.providers.http.HttpResponse;
import org.mule.providers.legstar.http.transformers.AbstractObjectToHttpResponseTransformer;
import org.mule.umo.transformer.TransformerException;
import org.mule.umo.UMOEventContext;

#if($propertyName == "Request")
#set($holderType = ${cixsOperation.requestHolderType})
#set($cixsStructures = ${cixsOperation.getInput()})
#else
#set($holderType = ${cixsOperation.responseHolderType})
#set($cixsStructures = ${cixsOperation.getOutput()})
#end
#set($transformerType = "${holderType}ToHttpResponse")
#set($toHbatransformerType = "${holderType}ToHostByteArray")

## Multiple input or output operations must use channel/containers
## In this case, individual objects are packed in a holder.
## Otherwise the type of Object produced or consumed is
## either a single JAXB Object or a POJO
#if ($cixsOperation.hasChannel())
#set($type = $holderType)
#set($holder = true)
#else
#set($cixsStructure = $cixsStructures.get(0))
#set($javaClassName = ${coxbHelper.getJavaClassName(${cixsStructure.jaxbPackageName}, ${cixsStructure.jaxbType})})
#set($type = ${helper.getClassName(${javaClassName})})
import ${javaClassName};
#end

/**
 * LegStar/Mule Operation $type to Http response Transformer.
 * 
 * <code>${transformerType}</code> takes a $type
 * object as input, as well as a series of properties to create an http
 * response with binary content in host format (EBCDIC) ready to be sent
 * to a target Mainframe.
 * 
 * This class was generated by ${generatorName}.
 */
public class ${transformerType}
        extends AbstractObjectToHttpResponseTransformer {

    /**
     * Constructs the transformer. Source is a $type object.
     */
    public ${transformerType}() {
        super();
        registerSourceType(${type}.class);
    }

    /** {@inheritDoc} */
    public Object transform(
            final Object src,
            final String encoding,
            final UMOEventContext context) throws TransformerException {

        /* This situation arises if the client starts by an HTTP HEAD method. */
        if (src instanceof HttpResponse) {
            return src;
        }
        
        /* This situation happens when an exception happened. There is normally
        * a 500 http status set by the standard Mule exception mapping 
        * mechanism */
        if (src instanceof NullPayload) {
            return super.transform(null, encoding, context);
        }

        /* Use existing transformer to get a host byte array */
        $toHbatransformerType xformer =
            new ${toHbatransformerType}();
        byte[] hostBytes = (byte[]) xformer.transform(src, encoding, context);
        
        /* Delegate to parent the encapsulation in an http body */
        return super.transform(hostBytes, encoding, context);
    }

}

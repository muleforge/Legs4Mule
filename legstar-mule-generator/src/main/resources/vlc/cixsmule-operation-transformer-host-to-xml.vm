##/////////////////////////////////////////////////////////////////////
##Mule Operation Host Byte Array to XML transformer Template.
##@author Fady
##@version 0.1
##/////////////////////////////////////////////////////////////////////
#parse("vlc/cixsmule-operation-transformer-common.vm")
#set($transformerType = "HostTo${holderType}XmlMuleTransformer")
#set($holderNamespace = ${cixsOperation.responseHolderNamespace})
import com.legstar.coxb.transform.HostTransformException;
import org.mule.transport.legstar.transformer.AbstractHostToXmlMuleTransformer;
#if($holder)
import java.util.HashMap;
import javax.xml.namespace.QName;
import com.legstar.coxb.transform.AbstractXmlTransformers;
import org.mule.api.transformer.TransformerException;
#end
#foreach($cixsStructure in $cixsStructures)
import ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.jaxbType})}XmlTransformers;
#end

/**
 * Host Byte Array to XML Mule Transformer for $type type.
 * <p/>
 * <code>${transformerType}</code> takes a byte array in host format
 * (EBCDIC) coming from a source Mainframe as input and turns it into
 * an XML bound to the $type object.
 * <p/>
 * Class generated by ${generatorName}.
 */
public class ${transformerType} extends AbstractHostToXmlMuleTransformer {

    /**
     * Constructs the transformer. Source is a byte array and result will be
     * an XML.
     * @throws HostTransformException if transformer cannot be created
     */
    public ${transformerType}() throws HostTransformException {
#if($holder)
        super(new HashMap < String, AbstractXmlTransformers >());
#foreach($cixsStructure in $cixsStructures)
        getXmlBindingTransformersMap().put("${cixsStructure.cicsContainer}", new ${cixsStructure.jaxbType}XmlTransformers());
#end
#else
#foreach($cixsStructure in $cixsStructures)
        super(new ${cixsStructure.jaxbType}XmlTransformers());
#end
#end
    }

#if($holder)
    /** {@inheritDoc} */
    public QName getHolderQName() throws TransformerException {
        return new QName("${holderNamespace}",
                "${holderType}");
    }
#end

}

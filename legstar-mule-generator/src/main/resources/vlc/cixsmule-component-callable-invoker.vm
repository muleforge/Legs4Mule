##/////////////////////////////////////////////////////////////////////
##Mule Component Callable Invoker Velocity Template.
##@author Fady
##@version 0.1
##/////////////////////////////////////////////////////////////////////
## ==================================================================
## Create a list of unique import names
##
#macro(addType)
#if (!$importTypes.contains($newType))
#set($ret = $importTypes.add($newType))
#end
#end
## ==================================================================
#parse("vlc/cixsmule-component-common-package.vm")
import org.mule.providers.legstar.cixs.AbstractAdapterCallable;
import org.mule.providers.legstar.cixs.MuleCixsException;
import org.mule.providers.legstar.cixs.MuleHostHeader;

import com.legstar.coxb.transform.HostTransformException;
import com.legstar.host.invoke.HostInvokerException;
#set($importTypes = [])
## ==================================================================
## import jaxb Types for non channel/Container operations
##
#foreach ($cixsOperation in $muleComponent.cixsOperations)
#if(!${cixsOperation.cicsChannel})
#foreach ($cixsStructure in ${cixsOperation.getInput()})
#set($newType = ${helper.getQualClassName(${cixsStructure.jaxbPackageName}, ${cixsStructure.jaxbType})})
#addType()
#end
#end
#end
## ==================================================================

#foreach($importType in $importTypes)
import ${importType};
#end
## ==================================================================
## Setting input or output structure
##
#macro(setStruct $cixsStructures $mode $containers)
#if($containers)${mode}Parts#else#if($cixsStructures.size() > 0)${mode}${cixsStructures.get(0).coxbType}#else null#end#end
#end
## ==================================================================

/**
 * LegStar/Mule Callable Invoker implementation.
 * Each method maps to a mainframe program. 
 * 
 * This class was generated by ${generatorName}.
 */
public class ${muleComponent.interfaceClassName}Callable extends AbstractAdapterCallable {

    /** Name of this action adapter implementation. */
    private static final String  ACTION_ADAPTER_NAME = "${muleComponent.name}";

#foreach ($cixsOperation in $muleComponent.cixsOperations)
    /** Invoker implementation for operation lsfileae. */
    private ${cixsOperation.className}ProgramInvoker m${cixsOperation.className}ProgramInvoker;

#end
    /**
    * Standard constructor.
    */
    public ${muleComponent.interfaceClassName}Callable() {
        super(ACTION_ADAPTER_NAME);
#foreach ($cixsOperation in $muleComponent.cixsOperations)
        m${cixsOperation.className}ProgramInvoker = new ${cixsOperation.className}ProgramInvoker(getLegStarConfigFileName());
#end
    }

    /**
     * Synchronous execution of mainframe programs.
     * <p/>
     * @param request the request java type that will be converted to mainframe
     *  format before it is sent over the wire.
     * @param hostHeader mainframe addressing parameters
     * @return the reply java type inferred from the mainframe program output
     * @throws MuleCixsException signals problems running mainframe program
     */
    public Object call(
          final Object request,
          final MuleHostHeader hostHeader) throws MuleCixsException {
        try {

#foreach ($cixsOperation in $muleComponent.cixsOperations)
            if (request instanceof ${cixsOperation.requestHolderType}) {
                return get${cixsOperation.className}ProgramInvoker().${cixsOperation.name}(
                        hostHeader.getAddress(),
                        getRequestID(hostHeader),
                        (${cixsOperation.requestHolderType}) request);
            }
    
#end
            throw new MuleCixsException(
                    "Request object of class "
                    + request.getClass().getName() + " is not supported");
        } catch (HostInvokerException e) {
            throw new MuleCixsException(e);
        } catch (HostTransformException e) {
            throw new MuleCixsException(e);
        }
    }

#foreach ($cixsOperation in $muleComponent.cixsOperations)
    /**
     * @return the invoker implementation for operation ${cixsOperation.name}
     */
    public ${cixsOperation.className}ProgramInvoker get${cixsOperation.className}ProgramInvoker() {
        return m${cixsOperation.className}ProgramInvoker;
    }

    /**
     * @param programInvoker the invoker implementation for operation ${cixsOperation.name} to set
     */
    public void set${cixsOperation.className}ProgramInvoker(
            final ${cixsOperation.className}ProgramInvoker programInvoker) {
        m${cixsOperation.className}ProgramInvoker = programInvoker;
    }

#end
}

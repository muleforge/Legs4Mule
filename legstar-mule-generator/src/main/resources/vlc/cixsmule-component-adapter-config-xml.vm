##/////////////////////////////////////////////////////////////////////
##Mule Component adapter configuration XML Template.
##@author Fady
##/////////////////////////////////////////////////////////////////////
## ==================================================================
## Calculates the maximum host size of a structure
## 
#macro(getLength $structure)
#set($length = ${cixsHelper.getByteLength(${structure.jaxbPackageName}, ${structure.jaxbType})})
#end
## ==================================================================
## for commarea-driven programs, this calculates the size of the
## input or output structure allowing for no input or no output
## 
#macro(getCommareaLength $structures)
#set($length = 0)
#if(${structures.size()} > 0)
#set($structure = ${structures.get(0)})
#getLength($structure)
#end
#end
## ==================================================================
## for container-driven programs, produce elements for each container
## in a container list
## 
#macro(produceContainers $structures $containerType)
#foreach($structure in ${structures})
#getLength($structure)
            <legstar:${containerType}-container name="${structure.cicsContainer}" maxLength="${length}" />
#end
#end
## ==================================================================
#if($sampleConfigurationPayloadType == "java")
#set($sampleConfigurationPayloadTypeComment = "serialized java objects")
#set($transformerNameQualifier = "")
#set($clientPayloadType = "Java")
#end
#if($sampleConfigurationPayloadType == "xml")
#set($sampleConfigurationPayloadTypeComment = "XML strings")
#set($transformerNameQualifier = "Xml")
#set($clientPayloadType = "Xml")
#end
#if($sampleConfigurationTransport == "http")
#set($sampleConfigurationTransportComment = "LEGSTAR-HTTP")
#end
#if($sampleConfigurationTransport == "wmq")
#set($sampleConfigurationTransportComment = "JMS/WebSphere MQ")
#end
#if($sampleConfigurationTransport == "tcp")
#set($sampleConfigurationTransportComment = "LEGSTAR-TCP")
#end
#if($sampleConfigurationTransport == "mock")
#set($sampleConfigurationTransportComment = "LEGSTAR-MOCK")
#end
## ==================================================================
#if($sampleConfigurationHostMessagingType == "legstar")
#set($hostToRequestTransformer = "legstar:host-to-legstar-transformer")
#set($responseToHostTransformer = "legstar:legstar-to-host-transformer")
#set($sampleConfigurationHostMessagingTypeComment = "LegStar")
#end
#if($sampleConfigurationHostMessagingType == "mqcih")
#set($hostToRequestTransformer = "legstar-wmq:host-to-mqcih-transformer")
#set($responseToHostTransformer = "legstar-wmq:mqcih-to-host-transformer")
#set($sampleConfigurationHostMessagingTypeComment = "WMQ Bridge")
#end
<?xml version="1.0" encoding="UTF-8"?>
<!--  This Mule configuration implements an adapter service for a mainframe program.
      Clients of this Mule service are expected to send ${sampleConfigurationPayloadTypeComment} over HTTP.
      Transport from Mule service to mainframe is ${sampleConfigurationTransportComment}.
 -->
## ==================================================================
## XML Schema definitions
## ==================================================================
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:http="http://www.mulesoft.org/schema/mule/http"
        xmlns:legstar="http://www.mulesoft.org/schema/mule/legstar"
#if($sampleConfigurationTransport == "wmq")
        xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
        xmlns:legstar-wmq="http://www.mulesoft.org/schema/mule/legstar/wmq"
#end
#if($sampleConfigurationTransport == "tcp")
        xmlns:legstar-tcp="http://www.mulesoft.org/schema/mule/legstar/tcp"
#end
#if($sampleConfigurationTransport == "mock")
        xmlns:legstar-mock="http://www.mulesoft.org/schema/mule/legstar/mock"
#end
    xsi:schemaLocation=
        "http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.1/mule.xsd
         http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/3.1/mule-http.xsd
         http://www.mulesoft.org/schema/mule/legstar http://www.legsem.com/legstar/xml/mule-legstar-3.1.xsd
#if($sampleConfigurationTransport == "wmq")
         http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/3.1/mule-jms.xsd
         http://www.mulesoft.org/schema/mule/legstar/wmq http://www.legsem.com/legstar/xml/mule-legstar-wmq-3.1.xsd
#end
#if($sampleConfigurationTransport == "tcp")
         http://www.mulesoft.org/schema/mule/legstar/tcp http://www.legsem.com/legstar/xml/mule-legstar-tcp-3.1.xsd
#end
#if($sampleConfigurationTransport == "mock")
         http://www.mulesoft.org/schema/mule/legstar/mock http://www.legsem.com/legstar/xml/mule-legstar-mock-3.1.xsd
#end
        ">

    <description>Mule configuration for ${muleComponent.name} adapter service</description>

## ==================================================================
## Connectors definitions
## ==================================================================
#if($sampleConfigurationTransport == "wmq")
    <legstar-wmq:connector name="mainframeConnector"
        jndiInitialFactory="${wmqJndiContextFactory}"
        jndiProviderUrl="${wmqJndiUrl}"
        connectionFactoryJndiName="${wmqConnectionFactory}"
        specification="1.1"
        jndiDestinations="true"
        forceJndiDestinations="true"
        disableTemporaryReplyToDestinations="true"
        numberOfConsumers="1" >
    </legstar-wmq:connector>
#end

## ==================================================================
## Transformers definitions
## ==================================================================
#foreach ($cixsOperation in $muleComponent.cixsOperations)
#set($operationPackageName = ${cixsOperation.packageName})
#set($requestTransformer = "${cixsOperation.requestHolderType}${transformerNameQualifier}ToHostMuleTransformer")
#set($responseTransformer = "HostTo${cixsOperation.responseHolderType}${transformerNameQualifier}MuleTransformer")
#set($qualRequestTransformer = ${helper.getQualClassName($operationPackageName, $requestTransformer)})
#set($qualResponseTransformer = ${helper.getQualClassName($operationPackageName, $responseTransformer)})
    <!-- Transform ${sampleConfigurationPayloadTypeComment} to mainframe data -->
    <legstar:${sampleConfigurationPayloadType}-to-host-transformer name="${cixsOperation.name}${clientPayloadType}ToHost"
#if($hostCharset)
        hostCharset="${hostCharset}"
#end                                
        class="${qualRequestTransformer}" />

    <!-- Transform mainframe data to ${sampleConfigurationPayloadTypeComment} -->
    <legstar:host-to-${sampleConfigurationPayloadType}-transformer name="${cixsOperation.name}HostTo${clientPayloadType}"
#if($hostCharset)
        hostCharset="${hostCharset}"
#end                                
        class="${qualResponseTransformer}" />

    <!-- Wrap mainframe data in a ${sampleConfigurationHostMessagingTypeComment} request for mainframe program execution -->
    <${hostToRequestTransformer} name="${cixsOperation.name}HostToLegStar"
#if($hostCharset)
        hostCharset="${hostCharset}"
#end                                
#if($sampleConfigurationTransport == "wmq")
        replyTo="mainframeReplyEndpoint"
#end
    >
        <legstar:host-program
            name="${cixsOperation.cicsProgramName.toUpperCase()}"
#if(${cixsOperation.cicsChannel})
            channelName="${cixsOperation.cicsChannel}"
#else
#getCommareaLength(${cixsOperation.getInput()})
#set($inputLength = $length)
#getCommareaLength(${cixsOperation.getOutput()})
#set($outputLength = $length)
#if($outputLength > $inputLength)
            maxDataLength="${outputLength}"
            dataLength="${inputLength}"
#else
            maxDataLength="${inputLength}"
#end
#end
        >
#if(${cixsOperation.cicsChannel})
#if(${cixsOperation.getInput().size()} > 0)
#produceContainers(${cixsOperation.getInput()} "input")
#end
#if(${cixsOperation.getOutput().size()} > 0)
#produceContainers(${cixsOperation.getOutput()} "output")
#end
#end
        </legstar:host-program>
    </${hostToRequestTransformer}>
    
    <!-- Unwrap ${sampleConfigurationHostMessagingTypeComment} response to mainframe program execution -->
    <${responseToHostTransformer} name="${cixsOperation.name}LegStarToHost"/>
#end

## ==================================================================
## Client endpoints definitions
## ==================================================================
#foreach ($cixsOperation in $muleComponent.cixsOperations)
    <http:endpoint name="${cixsOperation.name}ClientEndpoint" exchange-pattern="request-response"
        address="http://localhost:3280/${cixsOperation.name}" >
        <byte-array-to-object-transformer/>
    </http:endpoint>
#end

## ==================================================================
## Mainframe endpoints definitions
## ==================================================================
#if($sampleConfigurationTransport == "http")
    <legstar:endpoint name="mainframeRequestEndpoint" exchange-pattern="request-response"
        address="${legstarHttpAddress}" />
#end
#if($sampleConfigurationTransport == "wmq")
    <legstar-wmq:endpoint name="mainframeRequestEndpoint" exchange-pattern="request-response"
        address="legstar-wmq://${wmqRequestQueue}" />

    <legstar-wmq:endpoint name="mainframeReplyEndpoint"
        address="legstar-wmq://${wmqReplyQueue}" />
#end
#if($sampleConfigurationTransport == "tcp")
    <legstar-tcp:endpoint name="mainframeRequestEndpoint" exchange-pattern="request-response"
        address="legstar-tcp://${tcpHost}:${tcpPort}" />
#end
#if($sampleConfigurationTransport == "mock")
    <legstar-mock:endpoint name="mainframeRequestEndpoint" exchange-pattern="request-response"
        address="legstar-mock://localhost" />
#end

## ==================================================================
## Flow definition
## ==================================================================
#foreach ($cixsOperation in $muleComponent.cixsOperations)
    <flow name="${cixsOperation.name}Adapter">
        <inbound-endpoint ref="${cixsOperation.name}ClientEndpoint" />
        <outbound-endpoint ref="mainframeRequestEndpoint"
            transformer-refs="${cixsOperation.name}${clientPayloadType}ToHost ${cixsOperation.name}HostToLegStar"
            responseTransformer-refs="${cixsOperation.name}LegStarToHost ${cixsOperation.name}HostTo${clientPayloadType}" />
    </flow>
#end
</mule>
##/////////////////////////////////////////////////////////////////////
##Mule Operation Object to Host Byte Array transformer Template.
##@author Fady
##@version 0.1
##/////////////////////////////////////////////////////////////////////
#if(${cixsOperation.packageName})
package ${cixsOperation.packageName};
#end
import org.mule.providers.legstar.transformers.AbstractJavaToHostEsbTransformer;
#if($propertyName == "Request")
#set($holderType = ${cixsOperation.requestHolderType})
#set($cixsStructures = ${cixsOperation.getInput()})
#else
#set($holderType = ${cixsOperation.responseHolderType})
#set($cixsStructures = ${cixsOperation.getOutput()})
#end
## Multiple input or output operations must use channel/containers
## In this case, individual objects are packed in a holder.
## Otherwise the type of Object produced or consumed is
## either a single JAXB Object or a POJO
#if ($cixsOperation.hasChannel())
#set($type = $holderType)
#set($holder = true)
import java.util.HashMap;
import java.util.Map;
import com.legstar.coxb.transform.AbstractTransformers;
import org.mule.umo.transformer.TransformerException;
#else
#set($cixsStructure = $cixsStructures.get(0))
#set($javaClassName = ${coxbHelper.getJavaClassName(${cixsStructure.jaxbPackageName}, ${cixsStructure.jaxbType})})
#set($type = ${helper.getClassName(${javaClassName})})
#end
#foreach($cixsStructure in $cixsStructures)
#set($javaClassName = ${coxbHelper.getJavaClassName(${cixsStructure.jaxbPackageName}, ${cixsStructure.jaxbType})})
import ${javaClassName};
#end
#set($transformerType = "${holderType}ToHostByteArray")
#foreach($cixsStructure in $cixsStructures)
import ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.jaxbType})}Transformers;
#end

/**
 * LegStar/Mule Operation $type to Host Byte Array Transformer.
 * 
 * <code>${transformerType}</code> takes a $type object as input
 * and turns it into a byte array in host format (EBCDIC) ready
 * to transport to a destination Mainframe.
 * 
 * This class was generated by ${generatorName}.
 */
public class ${transformerType} extends AbstractJavaToHostEsbTransformer {

    /**
     * Constructs the transformer. Source is a $type object and result
     * will be a byte array.
     */
    public ${transformerType}() {
#if($holder)
        super(new HashMap < String, AbstractTransformers >());
#foreach($cixsStructure in $cixsStructures)
        getBindingTransformersMap().put("${cixsStructure.cicsContainer}", new ${cixsStructure.jaxbType}Transformers());
#end
#else
#foreach($cixsStructure in $cixsStructures)
        super(new ${cixsStructure.jaxbType}Transformers());
#end
#end
        registerSourceType(${type}.class);
    }

#if($holder)
        /** {@inheritDoc} */
        public Object getObjectFromHolder(
                final Object holderObject,
                final String partID) throws TransformerException {
            
#foreach($cixsStructure in $cixsStructures)
            if (partID.equals("${cixsStructure.cicsContainer}")) {
                return ((${type}) holderObject).get${cixsStructure.jaxbPropertyName}();
            }
#end
            return null;
        }
#end

}

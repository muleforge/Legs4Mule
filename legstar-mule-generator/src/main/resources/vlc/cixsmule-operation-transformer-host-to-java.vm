##/////////////////////////////////////////////////////////////////////
##Mule Operation Host Byte Array to Object transformer Template.
##@author Fady
##@version 0.1
##/////////////////////////////////////////////////////////////////////
#parse("vlc/cixsmule-operation-transformer-common.vm")
#set($transformerType = "HostTo${holderType}MuleTransformer")
import org.mule.transport.legstar.transformers.AbstractHostToJavaMuleTransformer;
#if($holder)
import java.util.HashMap;
import java.util.Map;
import com.legstar.coxb.transform.AbstractTransformers;
import org.mule.api.transformer.TransformerException;
#end
#foreach($cixsStructure in $cixsStructures)
#set($javaClassName = ${coxbHelper.getJavaClassName(${cixsStructure.jaxbPackageName}, ${cixsStructure.jaxbType})})
import ${javaClassName};
#end
#foreach($cixsStructure in $cixsStructures)
import ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.jaxbType})}Transformers;
#end

/**
 * Host Byte Array to $type Mule Transformer.
 * <p/>
 * <code>${transformerType}</code> takes a byte array in host format
 * (EBCDIC) coming from a source Mainframe as input and turns it into
 * a $type object.
 * <p/>
 * Class generated by ${generatorName}.
 */
public class ${transformerType} extends AbstractHostToJavaMuleTransformer {

    /**
     * Constructs the transformer. Source is a byte array and result will be
     * a $type object.
     */
    public ${transformerType}() {
#if($holder)
        super(new HashMap < String, AbstractTransformers >());
#foreach($cixsStructure in $cixsStructures)
        getBindingTransformersMap().put("${cixsStructure.cicsContainer}", new ${cixsStructure.jaxbType}Transformers());
#end
#else
#foreach($cixsStructure in $cixsStructures)
        super(new ${cixsStructure.jaxbType}Transformers());
#end
#end
        setReturnClass(${type}.class);
    }

#if($holder)
    /** {@inheritDoc} */
    public Object createHolder(
            final Map < String, Object > transformedParts) throws TransformerException {
        ${type} holder = new ${type}();
#foreach($cixsStructure in $cixsStructures)
        holder.set${cixsStructure.jaxbPropertyName}((${cixsStructure.jaxbType}) transformedParts.get("${cixsStructure.cicsContainer}"));
#end
        return holder;
    }
#end

}

##/////////////////////////////////////////////////////////////////////
##Mule Operation Host Byte Array to Object transformer Template.
##@author Fady
##@version 0.1
##/////////////////////////////////////////////////////////////////////
#if(${cixsOperation.packageName})
package ${cixsOperation.packageName};
#end
import org.mule.providers.legstar.i18n.LegstarMessages;
import org.mule.providers.legstar.transformers.AbstractLegStarTransformer;
import org.mule.umo.transformer.TransformerException;
import org.mule.umo.UMOEventContext;

import com.legstar.messaging.HostMessageFormatException;
import com.legstar.messaging.LegStarMessage;
import com.legstar.messaging.impl.LegStarMessageImpl;
#if($propertyName == "Request")
#set($holderType = ${cixsOperation.requestHolderType})
#set($cixsStructures = ${cixsOperation.getInput()})
#else
#set($holderType = ${cixsOperation.responseHolderType})
#set($cixsStructures = ${cixsOperation.getOutput()})
#end

## Multiple input or output operations must use channel/containers
## In this case, individual objects are packed in a holder.
## Otherwise the type of Object produced or consumed is
## either a single JAXB Object or a POJO
#if ($cixsOperation.hasChannel())
#set($type = $holderType)
#set($holder = true)
#else
#set($cixsStructure = $cixsStructures.get(0))
#set($javaClassName = ${coxbHelper.getJavaClassName(${cixsStructure.jaxbPackageName}, ${cixsStructure.jaxbType})})
#set($type = ${helper.getClassName(${javaClassName})})
import ${javaClassName};
#end
#set($transformerType = "HostByteArrayTo${holderType}")
#foreach($cixsStructure in $cixsStructures)
import ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.coxbType})};
#end

/**
 * LegStar/Mule Operation Host Byte Array to $type Transformer.
 * 
 * <code>${transformerType}</code> takes a a byte array in host format
 * (EBCDIC) coming from a source Mainframe as input and turns it into
 * a $type object.
 * 
 * This class was generated by ${generatorName}.
 * Generated on $formattedDate
 */
public class ${transformerType} extends AbstractLegStarTransformer {

    /**
     * Constructs the transformer. Source is a byte array and result will be
     * a $type object.
     */
    public ${transformerType}() {
        registerSourceType(byte[].class);
        registerSourceType(LegStarMessage.class);
        setReturnClass(${type}.class);
    }

    /** {@inheritDoc} */
    public Object transform(
            final Object src,
            final String encoding,
            final UMOEventContext context) throws TransformerException {

        try {
            LegStarMessageImpl legstarMessage =
                getLegStarMessageForByteArray(src, encoding, context);

#if($holder)
            /* Create the holder binding object */
            ${holderType} holder = new ${holderType}();
            
#end
            /* Create binding objects and populate their inner java object */
#foreach($cixsStructure in $cixsStructures)
#set($bindingName = "${cixsStructure.jaxbFieldName}Binding")
            ${cixsStructure.coxbType} $bindingName =
                new ${cixsStructure.coxbType}();
#if($cixsStructure.cicsContainer)
#set($javaClassName = ${coxbHelper.getJavaClassName(${cixsStructure.jaxbPackageName}, ${cixsStructure.jaxbType})})
#set($jaxbType = ${helper.getClassName(${javaClassName})})
            legstarMessage.getBindingFromPart(
                    ${bindingName}, getHostCharset(), "${cixsStructure.cicsContainer}");
            holder.set${cixsStructure.jaxbPropertyName}(${bindingName}.get${jaxbType}());
            
#else
            legstarMessage.getBindingFromPart(
                    ${bindingName}, getHostCharset(), null);
                    
#end
#end
#if($holder)
            return holder;
#else
            return ${bindingName}.get${type}();
#end
        } catch (HostMessageFormatException e) {
            throw new TransformerException(
                    LegstarMessages.errorReceivingHostData(), this, e);
        }
    }

}

<?xml version="1.0" encoding="UTF-8"?>
<!-- =================================================================================
     Generate Mule artifacts to unable a local Mule component to be accessed
     by a mainframe program.
     Artifacts can be used to expose a Mule component for Mainframe consumption.
     Prerequisite: Cobol binding classes should have been generated
     using LegStar Coxbgen prior to using this script.
     Refer to http://www.legsem.com/legstar for info on generating binding classes.
  -->
<project basedir=".." default="compileCixs2Mule" name="generate-cixs2mule">

    <!-- ===========================================================  -->
    <!-- Setup environment
    -->
    <target name="init">

        <property environment="env"/>
        <!-- Mule location -->
        <property name="mule.home" value="${env.MULE_HOME}" />
        <!-- Target Mule UMO component name (to be consumed by Mainframe)   -->
        <property name="umo.component" value="MuleJvmquery" />
        <!-- Target Mule UMO implementation class name   -->
        <property name="umo.implementation" value="com.legstar.xsdc.test.cases.jvmquery.JVMQuery" />
        <!-- Target Mule UMO component method name   -->
        <property name="umo.method.name" value="queryJvm" />
        <!-- URI exposed by Mule UMO component to Mainframe clients   -->
        <property name="umo.service.URI" value="http://localhost:8083" />
        <!-- Mainframe character set   -->
        <property name="host.charset" value="IBM01140" />

        <!-- Generated Java artifacts package name  -->
        <property name="package.name" value="org.mule.transport.legstar.test.jvmquery"/>
        <!-- Generated Sample Mainframe client program name.   -->
        <property name="host.program.name" value="JVMQUERY" />
        <!-- Generated source code target location   -->
        <property name="src.dir" value="${basedir}/src/main/java"/>
        <!-- Generated binaries target location  -->
        <property name="bin.dir" value="${basedir}/target/classes"/>
        <!-- Generated Ant scripts target location   -->
        <property name="ant.dir" value="${basedir}/src/main/resources/ant/${umo.component}"/>
        <!-- Generated Mule configurations target location   -->
        <property name="conf.dir" value="${basedir}/src/main/resources/conf"/>
        <!-- Generated Properties files target location   -->
        <property name="prop.dir" value="${basedir}/src/main/resources"/>
        <!-- Generated COBOL code target location   -->
        <property name="cobol.dir" value="${basedir}/src/main/resources/cobol"/>

        <!-- Jar files target location   -->
        <property name="jar.dir" value="${env.MULE_HOME}/lib/user"/>

        <!-- Input JAXB type name (As generated by LegStar Jaxbgen)  -->
        <property name="jaxb.root.name.in" value="JvmQueryRequestType" />
        <!-- Output JAXB type name (As generated by LegStar Jaxbgen)   -->
        <property name="jaxb.root.name.out" value="JvmQueryReplyType" />
        <!-- JAXB classes package name (As generated by LegStar Jaxbgen)    -->
        <property name="jaxb.package.name" value="com.legstar.test.coxb.jvmquery"/>
    
        <!-- Location of JAXB classes (to be included in final jar)   -->
        <property name="jaxb.bin.dir" value="${basedir}/target/classes"/>
        <!-- Location of COXB binding classes (to be included in final jar)   -->
        <property name="coxb.bin.dir" value="${basedir}/target/classes"/>
        <!-- Location of custom code classes (to be included in final jar)   -->
        <property name="cust.bin.dir" value="${basedir}/target/classes"/>

        <!-- Classpath setting -->
        <path id="classpath">
            <dirset dir="${basedir}/conf"/>
            <fileset dir="${basedir}" includes="lib/mule/*.jar" />
            <fileset dir="${basedir}" includes="lib/user/*.jar" />
            <fileset dir="${basedir}" includes="lib/opt/*.jar" />
            <fileset dir="${mule.home}" includes="lib/mule/*.jar" />
            <fileset dir="${mule.home}" includes="lib/user/*.jar" />
            <fileset dir="${mule.home}" includes="lib/opt/*.jar" />
        </path>

        <!-- Mule component Generator ant task -->
        <taskdef name="cixs2mulegen"
          classname="org.mule.transport.legstar.gen.Cixs2MuleGenerator"
          classpathref="classpath" 
        /> 

        <mkdir dir="${src.dir}"/>
        <mkdir dir="${bin.dir}"/>
    </target>

    <!-- ===========================================================  -->
    <!-- This step creates all the artifacts for a Mule component.    -->
  
    <target name="generateCixs2Mule" depends="init">
    
        <cixs2mulegen targetSrcDir="${src.dir}"
            targetMuleConfigDir="${conf.dir}"
            targetPropDir="${prop.dir}"
            targetAntDir="${ant.dir}"
            targetJarDir="${jar.dir}"
            targetBinDir="${bin.dir}"
            targetCobolDir="${cobol.dir}"
            jaxbBinDir="${jaxb.bin.dir}"
            coxbBinDir="${coxb.bin.dir}"
            custBinDir="${cust.bin.dir}"
            hostCharset="${host.charset}"
          >
            <!-- This sample is for a single operation Mule component.
                 If your component has more than one, you need to add
                 cixsOperation elements accordingly. -->
            <cixsMuleComponent
                 implementationClassName="${umo.implementation}"
                 name="${umo.component}"
                 packageName="${package.name}"
                 serviceURI="${umo.service.URI}"
            >
                <cixsOperation name="${umo.method.name}"
                    cicsProgramName="${host.program.name}"
                >
                    <input
                        jaxbType="${jaxb.root.name.in}"
                        jaxbPackageName="${jaxb.package.name}"
                    />
                    <output
                        jaxbType="${jaxb.root.name.out}"
                        jaxbPackageName="${jaxb.package.name}"
                    />
                </cixsOperation>
            </cixsMuleComponent>
        </cixs2mulegen>
    
    </target>
 
    <!-- ===========================================================  -->
    <!-- Compile the generated artifacts
    -->
    <target name="compileCixs2Mule" depends="generateCixs2Mule">
        <javac srcdir="${src.dir}"
               includes="**/*.java"
               destdir="${bin.dir}"
               classpathref="classpath"
               fork="yes"
        />
    </target>
    
</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- =================================================================================
     Generate a Mule component as an adapter for a mainframe program.
     Artifacts can be used to call a remote Mainframe function.
     Prerequisite: Cobol binding classes should have been generated
     using LegStar Coxbgen prior to using this script.
     Refer to http://www.legsem.com/legstar for info on generating binding classes.
  -->
<project basedir=".." default="compileMule2Cicxs" name="generate-mule2cixs">

    <!-- ===========================================================  -->
    <!-- Setup environment
    -->
    <target name="init">

        <property environment="env"/>
        <property name="legstar.home" value="${env.LEGSTAR_HOME}" />
        <!-- Mule location -->
        <property name="mule.home" value="${env.MULE_HOME}" />
        <!-- Generated Mule component name   -->
        <property name="mule.component" value="lsfileae" />
        <!-- Generated Mule service package name  -->
        <property name="package.name" value="com.legstar.test.cixs.mule.lsfileae"/>
        <!-- Generated Mule service method name   -->
        <property name="method.name" value="lsfileae" />
        <!-- Mainframe program name triggered by the previous method   -->
        <property name="host.program.name" value="LSFILEAE" />
        <!-- Mainframe URI where LegStar is listening for adapters requests   -->
        <property name="host.uri" value="legstar:http://mainframe:4081/CICS/CWBA/LSWEBBIN" />
        
        <!-- Generated source code target location   -->
        <property name="src.dir" value="src"/>
        <!-- Generated binaries target location  -->
        <property name="bin.dir" value="build"/>
        <!-- Generated Ant scripts target location   -->
        <property name="ant.dir" value="ant"/>
        <!-- Generated Mule configurations target location   -->
        <property name="conf.dir" value="."/>
        <!-- Generated Properties files target location   -->
        <property name="prop.dir" value="."/>
        
        <!-- Jar files target location   -->
        <property name="jar.dir" value="${mule.home}/lib/user"/>

        <!-- Input JAXB type name (As generated by LegStar Jaxbgen)  -->
        <property name="jaxb.root.name.in" value="Dfhcommarea" />
        <!-- Output JAXB type name (As generated by LegStar Jaxbgen)   -->
        <property name="jaxb.root.name.out" value="Dfhcommarea" />
        <!-- JAXB classes package name (As generated by LegStar Jaxbgen)    -->
        <property name="jaxb.package.name" value="com.legstar.test.coxb.lsfileae"/>
    
        <!-- Location of JAXB classes (to be included in final jar)   -->
        <property name="jaxb.bin.dir" value="${bin.dir}"/>
        <!-- Location of COXB binding classes (to be included in final jar)   -->
        <property name="coxb.bin.dir" value="${bin.dir}"/>
        <!-- Location of custom code classes (to be included in final jar)   -->
        <property name="cust.bin.dir" value="${bin.dir}"/>

        <!-- Classpath setting -->
        <path id="classpath">
            <dirset dir="${conf.dir}"/>
            <pathelement location="${jaxb.bin.dir}"/>
            <pathelement location="${coxb.bin.dir}"/>
            <pathelement location="${cust.bin.dir}"/>
            <fileset dir="${legstar.home}" includes="lib/*.jar" />
            <fileset dir="${mule.home}" includes="lib/mule/*.jar" />
            <fileset dir="${mule.home}" includes="lib/opt/*.jar" />
        </path>

        <!-- Mule service Generator ant task -->
        <taskdef name="mule2cixsgen"
          classname="org.mule.providers.legstar.gen.Mule2CixsGenerator"
          classpathref="classpath" 
        /> 

        <mkdir dir="${src.dir}"/>
        <mkdir dir="${bin.dir}"/>
        
    </target>

    <!-- ===========================================================  -->
    <!-- This step creates all the artifacts for a Mule service. -->
  
    <target name="generateMule2Cixs" depends="init">
    
        <mule2cixsgen targetSrcDir="${src.dir}"
            targetMuleConfigDir="${conf.dir}"
            targetPropDir="${prop.dir}"
            targetAntDir="${ant.dir}"
            targetJarDir="${jar.dir}"
            targetBinDir="${bin.dir}"
            jaxbBinDir="${jaxb.bin.dir}"
            coxbBinDir="${coxb.bin.dir}"
            custBinDir="${cust.bin.dir}"
            hostURI="${host.uri}"
          >
            <!-- This sample is for a commarea-driven program. If your
                 program is container-driven, you need to add the
                 cicsChannel attribute to the cixsOperation element,
                 specify as many input and output elements as necessary
                 providing  a cicsContainer attribute for each. -->
            <cixsMuleComponent name="${mule.component}"
                packageName="${package.name}">
                <cixsOperation name="${method.name}"
                    cicsProgramName="${host.program.name}">
                    <input
                        jaxbType="${jaxb.root.name.in}"
                        jaxbPackageName="${jaxb.package.name}"
                    />
                    <output
                        jaxbType="${jaxb.root.name.out}"
                        jaxbPackageName="${jaxb.package.name}"
                    />
                </cixsOperation>
            </cixsMuleComponent>
        </mule2cixsgen>
    
    </target>
 
    <!-- ===========================================================  -->
    <!-- Compile the generated service classes
    -->
    <target name="compileMule2Cicxs" depends="generateMule2Cixs">
        <javac target="1.5"
            srcdir="${src.dir}"
            destdir="${bin.dir}"
            classpathref="classpath"
            fork="yes"
		        includes="com/legstar/**"
        />
    </target>

</project>
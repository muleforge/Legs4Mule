<?xml version="1.0" encoding="UTF-8"?>
<!-- =================================================================================
     This script creates all artifacts needed for a Legs4Mule component using
     LegStar cobol binding to java classes.
     Artifacts can be used to call a remote Mainframe function or to expose
     a Mule component for Mainframe consumption.
     Prerequisite: Cobol binding classes should have been generated
     using LegStar Coxbgen prior to using this script.
     Refer to http://www.legsem.com/legstar for info on generating binding classes.
  -->
<project basedir=".." default="generateCixsMule" name="generate-cixsmule">

    <!-- ===========================================================  -->
    <!-- Setup environment
    -->
    <target name="init">

        <property environment="env"/>
        <!-- Generated Mule component name   -->
        <property name="mule.component" value="MuleLsfileae" />
        <!-- Generated Mule component package name  -->
        <property name="package.name" value="org.mule.providers.legstar.test.lsfileae"/>
        <!-- Generated Mule component method name   -->
        <property name="method.name" value="lsfileae" />
        <!-- Mainframe program name triggered by the previous method   -->
        <property name="host.program.name" value="LSFILEAE" />
        
        <!-- Generated source code target location   -->
        <property name="src.dir" value="${basedir}/src/main/java"/>
        <!-- Ant scripts target location   -->
        <property name="ant.dir" value="${basedir}/src/main/resources/ant"/>
        <!-- Mule configurations target location   -->
        <property name="conf.dir" value="${basedir}/src/main/resources/conf"/>
        <!-- Properties files target location   -->
        <property name="prop.dir" value="${basedir}/src/main/resources"/>
        <!-- Jar files target location   -->
        <property name="jar.dir" value="${env.MULE_HOME}/lib/user"/>

        <!-- Input JAXB type name (As generated by LegStar Jaxbgen)  -->
        <property name="jaxb.root.name.in" value="DfhcommareaType" />
        <!-- Output JAXB type name (As generated by LegStar Jaxbgen)   -->
        <property name="jaxb.root.name.out" value="DfhcommareaType" />
        <!-- JAXB classes package name (As generated by LegStar Jaxbgen)    -->
        <property name="jaxb.package.name" value="com.legstar.test.coxb.lsfileae"/>
    
        <!-- Classpath setting -->
        <path id="classpath">
            <fileset dir="${basedir}" includes="lib/user/*.jar" />
            <fileset dir="${basedir}" includes="lib/opt/*.jar" />
        </path>

        <!-- Mule component Generator ant task -->
        <taskdef name="cixsmulegen"
          classname="org.mule.providers.legstar.gen.CixsMuleGenerator"
          classpathref="classpath" 
        /> 

    </target>

    <!-- ===========================================================  -->
    <!-- This step creates all the artifacts for a Mule component.    -->
  
    <target name="generateCixsMule" depends="init">
    
        <cixsmulegen targetSrcDir="${src.dir}"
            targetConfDir="${conf.dir}"
            targetPropDir="${prop.dir}"
            targetAntDir="${ant.dir}"
            targetJarDir="${jar.dir}"
            jaxbBinDir="${jaxb.bin.dir}"
            coxbBinDir="${coxb.bin.dir}"
            cixsBinDir="${cixs.bin.dir}"
            custBinDir="${cust.bin.dir}"
          >
            <!-- This sample is for a commarea-driven program. If your
                 program is container-driven, you need to add the
                 cicsChannel attribute to the cixsOperation element,
                 specify as many input and output elements as necessary
                 providing  a cicsContainer attribute for each. -->
            <cixsMuleComponent name="${mule.component}"
                packageName="${package.name}">
                <cixsOperation name="${method.name}"
                    cicsProgramName="${host.program.name}">
                    <input
                        jaxbType="${jaxb.root.name.in}"
                        jaxbPackageName="${jaxb.package.name}"
                    />
                    <output
                        jaxbType="${jaxb.root.name.out}"
                        jaxbPackageName="${jaxb.package.name}"
                    />
                </cixsOperation>
            </cixsMuleComponent>
        </cixsmulegen>
    
    </target>
 
</project>
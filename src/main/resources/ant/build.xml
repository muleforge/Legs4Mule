<?xml version="1.0" encoding="UTF-8"?>
<!-- =================================================================================
     This script creates all artifacts needed for a Mule Cixs component using
     LegStar COXB cobol binding to JAXB and CIXS connectivity.
     Prerequisite: COXB binding classes should have been generated
     using LegStar Coxbgen prior to using this script.
     Refer to http://www.legsem.com/legstar for info on generating binding classes.
  -->
<project basedir=".." default="generateCixsMule" name="generate-cixsmule">

    <!-- ===========================================================  -->
    <!-- Setup environment
    -->
    <target name="init">

        <property environment="env"/>
        <!-- Generated source code target location   -->
        <property name="src.dir" value="${basedir}/gen-src"/>
        <!-- Generated Mule component name   -->
        <property name="mule.component" value="MuleLsfileae" />
        <!-- Generated Mule component package name  -->
        <property name="package.name" value="org.mule.providers.legstar.test.lsfileae"/>
        <!-- Generated Mule component method name   -->
        <property name="method.name" value="lsfileae" />
        <!-- CICS program name triggered by the previous method   -->
        <property name="cics.program.name" value="LSFILEAE" />
        
        <!-- Input JAXB type name (As generated by LegStar Jaxbgen)  -->
        <property name="jaxb.root.name.in" value="DfhcommareaType" />
        <!-- Output JAXB type name (As generated by LegStar Jaxbgen)   -->
        <property name="jaxb.root.name.out" value="DfhcommareaType" />
        <!-- JAXB classes package name (As generated by LegStar Jaxbgen)    -->
        <property name="jaxb.package.name" value="com.legstar.test.coxb.lsfileae"/>
    
        <!-- Make sure we have target source directories -->
        <mkdir dir="${src.dir}"/>
        
        <!-- Classpath setting -->
        <path id="classpath">
            <fileset dir="${basedir}" includes="lib/legstar/*.jar" />
            <fileset dir="${basedir}" includes="lib/opt/*.jar" />
        </path>

        <!-- Service Generator ant task -->
        <taskdef name="cixsmulegen"
          classname="org.mule.providers.legstar.gen.CixsMuleGenerator"
          classpathref="classpath" 
        /> 

    </target>

    <!-- ===========================================================  -->
    <!-- This step creates all the artifacts for a Mule component.    -->
  
    <target name="generateCixsMule" depends="init">
    
        <cixsmulegen targetSrcDir="${src.dir}"
          >
            <!-- This sample is for a commarea-driven program. If your
                 program is container-driven, you need to add the
                 cicsChannel attribute to the cixsOperation element,
                 specify as many input and output elements as necessary
                 providing  a cicsContainer attribute for each. -->
            <cixsMuleComponent name="${mule.component}"
                packageName="${package.name}">
                <cixsOperation name="${method.name}"
                    cicsProgramName="${cics.program.name}">
                    <input
                        jaxbType="${jaxb.root.name.in}"
                        jaxbPackageName="${jaxb.package.name}"
                    />
                    <output
                        jaxbType="${jaxb.root.name.out}"
                        jaxbPackageName="${jaxb.package.name}"
                    />
                </cixsOperation>
            </cixsMuleComponent>
        </cixsmulegen>
    
    </target>
 
</project>
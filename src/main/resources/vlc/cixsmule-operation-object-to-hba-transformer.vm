##/////////////////////////////////////////////////////////////////////
##Mule Operation Object to Host Byte Array transformer Template.
##@author Fady
##@version 0.1
##/////////////////////////////////////////////////////////////////////
#if(${cixsOperation.packageName})
package ${cixsOperation.packageName};
#end
import org.mule.providers.legstar.i18n.LegstarMessages;
import org.mule.providers.legstar.transformers.AbstractLegStarTransformer;
import org.mule.providers.legstar.transformers.LegStarMessageToByteArray;
import org.mule.umo.transformer.TransformerException;
import org.mule.umo.UMOEventContext;

import com.legstar.messaging.HostMessageFormatException;
import com.legstar.messaging.LegStarMessage;
import com.legstar.messaging.impl.LegStarMessageImpl;
#if($propertyName == "Request")
#set($holderType = ${cixsOperation.requestHolderType})
#set($cixsStructures = ${cixsOperation.getInput()})
#else
#set($holderType = ${cixsOperation.responseHolderType})
#set($cixsStructures = ${cixsOperation.getOutput()})
#end

## Multiple input or output operations must use channel/containers
## In this case, individual objects are packed in a holder.
## Otherwise the type of Object produced or consumed is
## either a single JAXB Object or a POJO
#if ($cixsOperation.hasChannel())
#set($type = $holderType)
#set($holder = true)
#else
#set($cixsStructure = $cixsStructures.get(0))
#set($javaClassName = ${coxbHelper.getJavaClassName(${cixsStructure.jaxbPackageName}, ${cixsStructure.jaxbType})})
#set($type = ${helper.getClassName(${javaClassName})})
import ${javaClassName};
#end
#set($transformerType = "${holderType}ToHostByteArray")
#foreach($cixsStructure in $cixsStructures)
import ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.coxbType})};
#end

/**
 * LegStar/Mule Operation $type to Host Byte Array Transformer.
 * 
 * <code>${transformerType}</code> takes a $type
 * object as input, as well as a series of properties to create a byte array
 * in host format (EBCDIC) ready to be sent to a target Mainframe.
 * 
 * This class was generated by ${generatorName}.
 * Generated on $formattedDate
 */
public class ${transformerType} extends AbstractLegStarTransformer {

    /**
     * Constructs the transformer. Source is a $type object and
     * result will be a byte array.
     */
    public ${transformerType}() {
        registerSourceType(${type}.class);
        registerSourceType(LegStarMessage.class);
        setReturnClass(byte[].class);
    }

    /** {@inheritDoc} */
    public Object transform(
            final Object src,
            final String encoding,
            final UMOEventContext context) throws TransformerException {

        try {
            
            LegStarMessageToByteArray xformer = new LegStarMessageToByteArray();
            
            /* If this is already an architected message serialize it. */
            if (src instanceof LegStarMessage) {
                return xformer.transform(src, encoding, context);
            }
            
            /* Starting from here we are guaranteed to get an instance of the
             * expected object */
            ${type} srcObject = (${type}) src;
            
            /* Build a LegStar message */
            LegStarMessageImpl legstarMessage = getLegStarMessage(
                    context.getMessage());
           
#foreach($cixsStructure in $cixsStructures)
#set($hostByteSize = ${coxbHelper.getByteLength(${cixsStructure.jaxbPackageName}, ${cixsStructure.jaxbType})})
#if($cixsStructure.cicsContainer)
            legstarMessage.addMessagePart(
                    new ${cixsStructure.coxbType}(srcObject.get${cixsStructure.jaxbPropertyName}()),
                    ${hostByteSize}, getHostCharset(), "${cixsStructure.cicsContainer}");
#else
            legstarMessage.addMessagePart(
                    new ${cixsStructure.coxbType}(srcObject),
                    ${hostByteSize}, getHostCharset(), null);
#end
#end
            
            /* Serialize the LegStar message to a byte array */
            return xformer.transform(legstarMessage, encoding, context);
            
        } catch (HostMessageFormatException e) {
            throw new TransformerException(
                    LegstarMessages.errorFormattingHostData(), this, e);
        }
    }

}

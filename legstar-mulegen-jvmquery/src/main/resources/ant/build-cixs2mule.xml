<?xml version="1.0" encoding="UTF-8"?>
<!-- =================================================================================
     Generate a Mule service as an proxy for a mainframe program.
     Artifacts can be used to allow a remote mainframe program to invoke
     a POJO method, an ESB Service or a Web Service.
     Prerequisite: Cobol binding classes should have been generated
     using LegStar Coxbgen prior to using this script.
     Refer to http://www.legsem.com/legstar for info on generating binding classes.
  -->
<project basedir=".." default="compileCicxs2Mule" name="generate-cixs2mule">

    <!-- ===========================================================  -->
    <!-- Setup environment
    -->
    <target name="init">

        <property environment="env"/>
        <!-- Mule location -->
        <property name="mule.home" value="${env.MULE_HOME}" />
        <!-- LegStar location -->
        <property name="legstar.home" value="${env.LEGSTAR_HOME}" />

        <!-- Target UMO implementation   -->
        <property name="target.umo" value="com.legstar.xsdc.test.cases.jvmquery.JVMQuery" />
        <!-- Generated Mule proxy service name   -->
        <property name="mule.component" value="jvmquery" />
        <!-- Generated Mule service method name   -->
        <property name="method.name" value="queryJvm" />
        <!-- Generated Mule proxy service package name  -->
        <property name="package.name" value="com.legstar.test.cixs.mule.jvmquery"/>
        <!-- Generated Sample Mainframe client program name   -->
        <property name="host.program.name" value="JVMQUERY" />

        <!-- Generated source code target location   -->
        <property name="src.dir" value="src"/>
        <!-- Generated binaries target location  -->
        <property name="bin.dir" value="build"/>
        <!-- Generated Ant scripts target location   -->
        <property name="ant.dir" value="ant"/>
        <!-- Generated Mule configurations target location   -->
        <property name="conf.dir" value="."/>
        <!-- Generated COBOL code target location   -->
        <property name="cobol.dir" value="cobol"/>
        
        <!-- Generated distribution archives files target location   -->
        <property name="dist.dir" value="dist"/>
        <!-- Jar files target location   -->
        <property name="jar.dir" value="${mule.home}/lib/user"/>

        <!-- Input JAXB type name (As generated by LegStar Jaxbgen)  -->
        <property name="jaxb.root.name.in" value="JvmQueryRequest" />
        <!-- Output JAXB type name (As generated by LegStar Jaxbgen)   -->
        <property name="jaxb.root.name.out" value="JvmQueryReply" />
        <!-- JAXB classes package name (As generated by LegStar Jaxbgen)    -->
        <property name="jaxb.package.name" value="com.legstar.test.coxb.jvmquery"/>
    
        <!-- Location of JAXB classes (to be included in final jar)   -->
        <property name="jaxb.bin.dir" value="${bin.dir}"/>
        <!-- Location of COXB binding classes (to be included in final jar)   -->
        <property name="coxb.bin.dir" value="${bin.dir}"/>
        <!-- Location of custom code classes (to be included in final jar)   -->
        <property name="cust.bin.dir" value="${bin.dir}"/>

        <!-- Classpath setting -->
        <path id="classpath">
            <dirset dir="${conf.dir}"/>
            <pathelement location="${jaxb.bin.dir}"/>
            <pathelement location="${coxb.bin.dir}"/>
            <pathelement location="${cust.bin.dir}"/>
            <fileset dir="${legstar.home}" includes="lib/*.jar" />
            <fileset dir="${mule.home}" includes="lib/mule/*.jar" />
            <fileset dir="${mule.home}" includes="lib/opt/*.jar" />
        </path>

        <!-- Mule service Generator ant task -->
        <taskdef name="cixs2mulegen"
            classname="org.mule.transport.legstar.gen.Cixs2MuleGenerator"
            classpathref="classpath" 
        /> 

        <mkdir dir="${src.dir}"/>
        <mkdir dir="${bin.dir}"/>
        
    </target>

    <!-- ===========================================================  -->
    <!-- This step creates all the artifacts for a Mule Proxy service.
     -->
  
    <target name="generateCicxs2Mule" depends="init">
    
        <cixs2mulegen targetSrcDir="${src.dir}"
            targetMuleConfigDir="${conf.dir}"
            targetCobolDir="${cobol.dir}"
            targetDistDir="${dist.dir}"
            targetAntDir="${ant.dir}"
            targetJarDir="${jar.dir}"
            targetBinDir="${bin.dir}"
            jaxbBinDir="${jaxb.bin.dir}"
            coxbBinDir="${coxb.bin.dir}"
            custBinDir="${cust.bin.dir}"
            sampleConfigurationTransport="HTTP"
            sampleCobolHttpClientType="DFHWBCLI"
          >
            <!-- If you want MQ connectivity, change this
                 parameter and the WMQ transport parameters below:
                sampleConfigurationTransport="WMQ"
            -->
            <!-- Only single operation services are supported. -->
            <cixsMuleComponent name="${mule.component}"
                packageName="${package.name}">
                <cixsOperation name="${method.name}"
                    cicsProgramName="${host.program.name}">
                    <input
                        jaxbType="${jaxb.root.name.in}"
                        jaxbPackageName="${jaxb.package.name}"
                    />
                    <output
                        jaxbType="${jaxb.root.name.out}"
                        jaxbPackageName="${jaxb.package.name}"
                    />
                </cixsOperation>
            </cixsMuleComponent>
            
            <!-- Target UMO Component parameters -->
            <umoComponentTargetParameters
                implementationName="${target.umo}"
            />

            <!-- HTTP transport parameters -->
            <httpTransportParameters
                host="localhost"
                port="8083"
                path="/legstar/services/${mule.component}"
            />
            
            <!-- WMQ transport parameters
            <wmqTransportParameters
                jndiUrl="file:///JNDI-Directory"
                jndiContextFactory="com.sun.jndi.fscontext.RefFSContextFactory"
                connectionFactory="ConnectionFactory"
                zosQueueManager="CSQ1"
                requestQueue="JVMQUERY.POJO.REQUEST.QUEUE"
                replyQueue="JVMQUERY.POJO.REPLY.QUEUE"
            />
             -->
          
        </cixs2mulegen>
    
    </target>
 
    <!-- ===========================================================  -->
    <!-- Compile the generated service classes
    -->
    <target name="compileCicxs2Mule" depends="generateCicxs2Mule">
        <javac target="1.5"
            srcdir="${src.dir}"
            destdir="${bin.dir}"
            classpathref="classpath"
            fork="yes"
		        includes="com/legstar/**"
        />
    </target>

</project>
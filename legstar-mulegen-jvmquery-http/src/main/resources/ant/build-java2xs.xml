<!-- =================================================================================
     This script generates a Mapping XML Schema from a set of Java classes.
     It is assumed the Java classes binaries available from the bin folder
     otherwise modify the classpath to include your binaries.
  -->
<project basedir=".." default="generateXSD" name="generate-XSD">

    <!-- ===========================================================  -->
    <!-- Setup environment
    -->
    <target name="init">
    
        <property environment="env"/>
        <!-- LegStar location -->
        <property name="legstar.home" value="${env.LEGSTAR_HOME}" />
        <!-- Root Java classes   -->
        <property name="request.class.name" value="com.legstar.xsdc.test.cases.jvmquery.JVMQueryRequest" />
        <property name="reply.class.name" value="com.legstar.xsdc.test.cases.jvmquery.JVMQueryReply" />
        <!-- Target package name for JAXB classes   -->
        <property name="jaxb.package.name" value="com.legstar.test.coxb.jvmquery" />
        <!-- Target namespace for generated XML schema   -->
        <property name="namespace" value="http://jvmquery.cases.test.xsdc.legstar.com/" />
        <!-- Target location for generated XML schema   -->
        <property name="xsd.dir" value="schema" />
        <!-- Name of generated XSD file  -->
        <property name="xsd.filename" value="jvmquery.xsd" />
        
        <!-- Classpath setting -->
        <path id="classpath">
            <pathelement location="${basedir}"/>
            <fileset dir="${legstar.home}" includes="lib/*.jar" />
            <pathelement location="build"/>
        </path>
        
        <!-- Java Mapping Generator ant task -->
        <taskdef name="j2scgen"
            classname="com.legstar.j2sc.gen.JavaToXsdCobolTask"
            classpathref="classpath"/>
  
    </target>

    <!-- ===========================================================  -->
    <!-- Generate a Mapping XML Schema. Here we explicitly
        specify the root class names. As an alternative, the POJO
        could be annotated with JSR 181 XmlRootElement.
    -->
    <target name="generateXSD" depends="init">
        <echo message="Generating annotated ${xsd.filename}" />
        <mkdir dir="${xsd.dir}"/>
        <j2scgen 
            namespace="${namespace}"
            jaxbPackageName="${jaxb.package.name}"
            targetDir="${xsd.dir}"
            targetXsdFileName="${xsd.filename}"
        >
            <rootClass name="${request.class.name}"/>
            <rootClass name="${reply.class.name}"/>
        </j2scgen>
    </target>

</project>

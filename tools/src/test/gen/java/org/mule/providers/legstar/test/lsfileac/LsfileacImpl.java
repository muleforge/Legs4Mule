package org.mule.providers.legstar.test.lsfileac;

import org.mule.providers.legstar.cixs.MuleHostHeader;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.mule.umo.UMOEventContext;
import org.mule.umo.lifecycle.Callable;

import com.legstar.host.invoke.HostInvoker;
import com.legstar.host.invoke.HostInvokerException;
import com.legstar.host.invoke.HostInvokerFactory;

import org.mule.providers.legstar.cixs.MuleHostHeaderFactory;
import org.mule.providers.legstar.cixs.MuleCixsException;
import java.util.LinkedHashMap;
import java.util.Map;
import com.legstar.coxb.ICobolComplexBinding;

import com.legstar.test.coxb.lsfileac.bind.QueryDataTypeBinding;
import com.legstar.test.coxb.lsfileac.bind.QueryLimitTypeBinding;
import com.legstar.test.coxb.lsfileac.bind.ReplyDataTypeBinding;
import com.legstar.test.coxb.lsfileac.bind.ReplyStatusTypeBinding;

/**
 * LegStar/Mule Component implementation.
 * Each method maps to a CICS program. 
 * 
 * This class was generated by LegStar Mule Component generator.
 * Generated on 2008-07-17 08:59:55
 */
public class LsfileacImpl implements Lsfileac, Callable {

    /** The JNDI locator for the configuration file name.*/
    private static final String JNDI_CONFIG_FILE =
        "java:comp/env/legstar/configFileName";
    
    /** The default configuration file name if not recovered from JNDI. */
    private static final String DEFAULT_CONFIG_FILE = "legstar-invoker-config.xml";

    /** The configuration file name. */
    private String mConfigFileName;

    /** Lookup the configuration file name at construction time. */
    public LsfileacImpl() {
        try {
            Context initCtx = new InitialContext();
            mConfigFileName = (String) initCtx.lookup(JNDI_CONFIG_FILE);
        } catch (NamingException e) {
            mConfigFileName = DEFAULT_CONFIG_FILE;
        }
    }

    /** Properties for operation lsfileac. */
    private static final String LSFILEAC_PROP_FILE = "lsfileac.properties";

    /** Synchronous execution of a remote host program. */
    /** {@inheritDoc} */
    public final LsfileacResponseHolder lsfileac(
               final LsfileacRequestHolder request,
               final MuleHostHeader hostHeader)
        throws LsfileacException {

        LsfileacResponseHolder reply = null;
        try {
              
            /* Initialize invoker with static data and data from headers */
            HostInvoker mInvoker = HostInvokerFactory.createHostInvoker(
                mConfigFileName, hostHeader.getAddress(), LSFILEAC_PROP_FILE);

            /* Prepare the input parameter set using static binding */
            Map <String, ICobolComplexBinding> inputParts =
              new LinkedHashMap <String, ICobolComplexBinding>(); 
            QueryDataTypeBinding inputQueryDataTypeBinding =
                  new QueryDataTypeBinding(request.getQueryData());
            inputParts.put("QueryData", inputQueryDataTypeBinding);
            QueryLimitTypeBinding inputQueryLimitTypeBinding =
                  new QueryLimitTypeBinding(request.getQueryLimit());
            inputParts.put("QueryLimit", inputQueryLimitTypeBinding);
 
            /* Prepare the output parameter set using static binding */
            Map <String, ICobolComplexBinding> outputParts =
              new LinkedHashMap <String, ICobolComplexBinding>(); 
            ReplyDataTypeBinding outputReplyDataTypeBinding =
                  new ReplyDataTypeBinding();
            outputParts.put("ReplyData", outputReplyDataTypeBinding);
            ReplyStatusTypeBinding outputReplyStatusTypeBinding =
                  new ReplyStatusTypeBinding();
            outputParts.put("ReplyStatus", outputReplyStatusTypeBinding);
 
            /* Call remote program */
            mInvoker.invoke(hostHeader.getHostRequestID(),
                    inputParts,
                    outputParts);

            /* Populate response holder with reply objects */
            reply = new LsfileacResponseHolder();
            reply.setReplyData(outputReplyDataTypeBinding.getReplyDataType());
            reply.setReplyStatus(outputReplyStatusTypeBinding.getReplyStatusType());

        } catch (HostInvokerException e) {
            throw new LsfileacException(e);
        }

        return reply;
    }

    @Override
    public Object onCall(UMOEventContext eventContext) throws Exception {
        MuleHostHeader hostHeader =
            MuleHostHeaderFactory.createHostHeader(eventContext.getMessage());
        Object request  = eventContext.getTransformedMessage();
        if (request instanceof LsfileacRequestHolder) {
            if (hostHeader.getHostRequestID() == null) {
                hostHeader.setHostRequestID("lsfileac");
            }
            return lsfileac((LsfileacRequestHolder) request, hostHeader);
        }
        throw new MuleCixsException("Unrecognized request " + request);
    }

}

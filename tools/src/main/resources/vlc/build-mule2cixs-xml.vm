<?xml version="1.0" encoding="UTF-8"?>
<!-- =================================================================================
     Generate a Mule component as an adapter for a mainframe program.
     Artifacts can be used to call a remote Mainframe function.
     Prerequisite: Cobol binding classes should have been generated
     using LegStar Coxbgen prior to using this script.
     Refer to http://www.legsem.com/legstar for info on generating binding classes.
  -->
<project basedir="${antModel.productLocation}" default="signalSuccess" name="generate-mule2cics">

    <!-- ===========================================================  -->
    <!-- Setup environment
    -->
    <target name="init">

        <!-- Classpath setting -->
        <path id="classpath">
            <pathelement location="${antModel.jaxbBinDir}"/>
            <pathelement location="${antModel.coxbBinDir}"/>
            <pathelement location="${antModel.custBinDir}"/>
            <fileset dir="${basedir}" includes="lib/*.jar" />
            <fileset dir="${antModel.muleHome}" includes="lib/mule/*.jar" />
            <fileset dir="${antModel.muleHome}" includes="lib/user/*.jar" />
            <fileset dir="${antModel.muleHome}" includes="lib/opt/*.jar" />
        </path>

        <!-- Mule component Generator ant task -->
        <taskdef name="mule2cixsgen"
          classname="org.mule.providers.legstar.gen.Mule2CixsGenerator"
          classpathref="classpath" 
        /> 

    </target>

    <!-- ===========================================================  -->
    <!-- This step creates all the artifacts for a Mule component.    -->
  
    <target name="generateMule2Cixs" depends="init">
    
        <mule2cixsgen targetSrcDir="${antModel.targetSrcDir}"
            targetMuleConfigDir="${antModel.targetMuleConfigDir}"
            targetPropDir="${antModel.targetPropDir}"
            targetAntDir="${antModel.targetAntDir}"
            targetJarDir="${antModel.targetJarDir}"
            targetBinDir="${antModel.targetBinDir}"
            jaxbBinDir="${antModel.jaxbBinDir}"
            coxbBinDir="${antModel.coxbBinDir}"
            custBinDir="${antModel.custBinDir}"
            hostURI="${antModel.hostURI}"
            hostCharset="${antModel.hostCharset}"
          >
            <cixsMuleComponent name="${antModel.cixsMuleComponent.name}"
                packageName="${antModel.cixsMuleComponent.packageName}">
#foreach ($cixsOperation in $antModel.cixsMuleComponent.cixsOperations)
                <cixsOperation name="${cixsOperation.name}"
                    cicsProgramName="${cixsOperation.cicsProgramName}"
#if(!${helper.isEmpty(${cixsOperation.cicsChannel})})
                    cicsChannel="${cixsOperation.cicsChannel}"
#end
                    >
#foreach ($cixsStructure in $cixsOperation.input)
                    <input
                        jaxbType="${cixsStructure.jaxbType}"
                        jaxbPackageName="${cixsStructure.jaxbPackageName}"
#if ($cixsStructure.cicsContainer)
                        cicsContainer="${cixsStructure.cicsContainer}"
#end
                    />
#end
#foreach ($cixsStructure in $cixsOperation.output)
                    <output
                        jaxbType="${cixsStructure.jaxbType}"
                        jaxbPackageName="${cixsStructure.jaxbPackageName}"
#if ($cixsStructure.cicsContainer)
                        cicsContainer="${cixsStructure.cicsContainer}"
#end
                    />
#end
                </cixsOperation>
#end
            </cixsMuleComponent>
        </mule2cixsgen>
    
    </target>
 
    <!-- ===========================================================  -->
    <!-- Compile the generated artifacts
    -->
    <target name="compileMule2Cixs" depends="generateMule2Cixs">
        <mkdir dir="${antModel.targetBinDir}"/>
        <javac srcdir="${antModel.targetSrcDir}"
               includes="**/*.java"
               destdir="${antModel.targetBinDir}"
               classpathref="classpath"
               fork="yes"
        />
    </target>
    
  
    <!-- ===========================================================  -->
    <!-- Delete the probe file to signal success
    -->
    <target name="signalSuccess" depends="compileMule2Cixs">
        <delete file="${antModel.probeFile}" quiet="true"/>
    </target>
    
</project>
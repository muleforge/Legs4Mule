##/////////////////////////////////////////////////////////////////////
##Mule Component Interface Velocity Template.
##@author Fady
##@version 0.1
##/////////////////////////////////////////////////////////////////////
## ==================================================================
## Create a list of unique import names
##
#macro(addType)
#if (!$importTypes.contains($newType))
#set($ret = $importTypes.add($newType))
#end
#end
## ==================================================================
#parse("vlc/cixsmule-component-common-package.vm")
#parse("vlc/cixsmule-component-common-imports.vm")
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.mule.umo.UMOEventContext;
import org.mule.umo.lifecycle.Callable;

import com.legstar.host.invoke.HostInvoker;
import com.legstar.host.invoke.HostInvokerException;
import com.legstar.host.invoke.HostInvokerFactory;

import org.mule.providers.legstar.cixs.MuleHostHeaderFactory;
import org.mule.providers.legstar.cixs.MuleCixsException;
#if ($maps)
import java.util.LinkedHashMap;
import java.util.Map;
import com.legstar.coxb.ICobolComplexBinding;
#end
## ==================================================================
## import binding Types
##
#foreach ($cixsOperation in $muleComponent.cixsOperations)
#foreach ($cixsStructure in ${cixsOperation.getInput()})
#set($newType = ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.coxbType})})
#addType()
#end
#foreach($cixsStructure in ${cixsOperation.getOutput()})
#set($newType = ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.coxbType})})
#addType()
#end
#end
## ==================================================================

#foreach($importType in $importTypes)
import ${importType};
#end
## ==================================================================
## Since input and output structures are initialized almost in the
## same way, we use a common macro.
##
#macro(initStruct $cixsStructures $mode $containers)
            /* Prepare the $mode parameter set using static binding */
#if($containers)
            Map <String, ICobolComplexBinding> ${mode}Parts =
              new LinkedHashMap <String, ICobolComplexBinding>(); 
#end
#foreach($cixsStructure in $cixsStructures)
            ${cixsStructure.coxbType} ${mode}${cixsStructure.coxbType} =
                  new ${cixsStructure.coxbType}(#if(${mode} == "input")request#if($containers).get${cixsStructure.jaxbPropertyName}()#end#end);
#if($containers)
            ${mode}Parts.put("${cixsStructure.cicsContainer}", ${mode}${cixsStructure.coxbType});
#end
#end ##foreach            
#end
## ==================================================================
## Setting input or output structure
##
#macro(setStruct $cixsStructures $mode $containers)
#if($containers)${mode}Parts#else#if($cixsStructures.size() > 0)${mode}${cixsStructures.get(0).coxbType}#else null#end#end
#end
## ==================================================================

/**
 * LegStar/Mule Component implementation.
 * Each method maps to a CICS program. 
 * 
 * This class was generated by ${generatorName}.
 * Generated on $formattedDate
 */
public class $muleComponent.implementationClassName implements ${muleComponent.interfaceClassName}, Callable {

    /** The JNDI locator for the configuration file name.*/
    private static final String JNDI_CONFIG_FILE =
        "java:comp/env/legstar/configFileName";
    
    /** The default configuration file name if not recovered from JNDI. */
    private static final String DEFAULT_CONFIG_FILE = "legstar-invoker-config.xml";

    /** The configuration file name. */
    private String mConfigFileName;

    /** Lookup the configuration file name at construction time. */
    public ${muleComponent.implementationClassName}() {
        try {
            Context initCtx = new InitialContext();
            mConfigFileName = (String) initCtx.lookup(JNDI_CONFIG_FILE);
        } catch (NamingException e) {
            mConfigFileName = DEFAULT_CONFIG_FILE;
        }
    }

#foreach ($cixsOperation in $muleComponent.cixsOperations)
#if(!${helper.isEmpty(${cixsOperation.cicsChannel})})
#set($containers = true)
#else
#set($containers = false)
#end
    /** Properties for operation ${cixsOperation.name}. */
    private static final String ${cixsOperation.name.toUpperCase()}_PROP_FILE = "${cixsOperation.name}.properties";

    /** Synchronous execution of a remote host program. */
    /** {@inheritDoc} */
    public final $cixsOperation.responseHolderType ${cixsOperation.name}(
               final $cixsOperation.requestHolderType request,
               final MuleHostHeader hostHeader)
        throws ${cixsOperation.faultType} {

        $cixsOperation.responseHolderType reply = null;
        try {
              
            /* Initialize invoker with static data and data from headers */
            HostInvoker mInvoker = HostInvokerFactory.createHostInvoker(
                mConfigFileName, hostHeader.getAddress(), ${cixsOperation.name.toUpperCase()}_PROP_FILE);

#initStruct($cixsOperation.getInput() "input" $containers)

#initStruct($cixsOperation.getOutput() "output" $containers)

            /* Call remote program */
            mInvoker.invoke(hostHeader.getHostRequestID(),
                    #setStruct($cixsOperation.getInput() "input" $containers),
                    #setStruct($cixsOperation.getOutput() "output" $containers));

#if($containers)
            /* Populate response holder with reply objects */
            reply = new ${cixsOperation.responseHolderType}();
#foreach($cixsStructure in $cixsOperation.getOutput())
            reply.set${cixsStructure.jaxbPropertyName}(output${cixsStructure.coxbType}.get${cixsStructure.jaxbType}());
#end  
#else
#if($cixsOperation.getOutput().size() > 0)
            /* Get reply object */
            reply = output${cixsOperation.getOutput().get(0).coxbType}.get${cixsOperation.getOutput().get(0).jaxbType}();
#end
#end

        } catch (HostInvokerException e) {
            throw new ${cixsOperation.faultType}(e);
        }

        return reply;
    }

#end
    @Override
    public Object onCall(UMOEventContext eventContext) throws Exception {
        MuleHostHeader hostHeader =
            MuleHostHeaderFactory.createHostHeader(eventContext.getMessage());
        Object request  = eventContext.getTransformedMessage();
#foreach ($cixsOperation in $muleComponent.cixsOperations)
        if (request instanceof ${cixsOperation.requestHolderType}) {
            if (hostHeader.getHostRequestID() == null) {
                hostHeader.setHostRequestID("${cixsOperation.name}");
            }
            return ${cixsOperation.name}((${cixsOperation.requestHolderType}) request, hostHeader);
        }
#end
        throw new MuleCixsException("Unrecognized request " + request);
    }

}
